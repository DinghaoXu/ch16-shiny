names <- c("Dinghao", "Will", "Willian")
print(names)
# Use the colon operator : to create a vector `n` of numbers from 10:49
n <- c(10:49)
# Use the `length()` function to get the number of elements in `n`
length(n)
# Add 1 to each element in `n` and print the result
n + 1
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <- seq(10, 1)
# Subtract `m` FROM `n`. Note the recycling!
new vector <- n - m
# Subtract `m` FROM `n`. Note the recycling!
new vec <- n - m
# Subtract `m` FROM `n`. Note the recycling!
new_vector <- n - m
# Use the `seq()` function to produce a range of numbers from -5 to 10 in `0.1`
# increments. Store it in a variable `x_range`
x_range <- seq(-5, 10, 0.1)
# Create a vector `sin_wave` by calling the `sin()` function on each element
# in `x_range`.
sin_wave <- sin(x_range)
# Create a vector `cos_wave` by calling the `cos()` function on each element
# in `x_range`.
cos_wave <- cos(x_range)
# Create a vector `wave` by multiplying `sin_wave` and `cos_wave` together, then
# adding `sin_wave` to the product
wave <- sin_wave * cos_wave + sin_wave
# Use the `plot()` function to plot your `wave`!
plot(wave)
# Create a vector `first_ten` that has the values 10 through 20 in it (using
# the : operator)
first_ten <- c(10:20)
# Create a vector `next_ten` that has the values 21 through 30 in it (using the
# seq() function)
next_ten <- c(21:30)
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- first_ten + next_ten
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- c(first_ten, next_ten)
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
eleventh <- all_numbers[11]
# Create a vector `some_numbers` that contains the 2nd through the 5th elements
# of `all_numbers`
some_number <- all_numbers[2:5]
# Create a vector `even` that holds the even numbers from 1 to 100
even <- seq(2, 100, 2)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
test <- all(even %% 2 == 0)
# Create a vector `phone_numbers` that contains the numbers 8, 6, 7, 5, 3, 0, 9
phone_numbers <- c(8, 7, 6, 5, 3, 0, 9)
# Create a vector `prefix` that has the first three elements of `phone_numbers`
prefix <- prefix[1:3]
# Create a vector `prefix` that has the first three elements of `phone_numbers`
prefix <- phone_numbers[1:3]
# Create a vector `small` that has the values of `phone_numbers` that are
# less than or equal to 5
small <- phone_numbers[phone_numbers <= 5]
# Create a vector `large` that has the values of `phone_numbers` that are
# strictly greater than 5
large <- phone_numbers[phone_numbers > 5]
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
phone_numbers[phone_numbers > 5] <- 5
# Replace every odd-numbered value in `phone_numbers` with the number 0
phone_numbers[c(TRUE, FALSE)] <- 0
# Create a vector `words` of 6 (or more) words.
# You can Google for a "random word generator" if you wish!
words <- c("I", "am", "the", "best", "programmer", "in", "the", "universe")
# Create a vector `words_of_the_day` that is your `words` vector with the string
# "is the word of the day!" pasted on to the end.
# BONUS: Surround the word in quotes (e.g., `'data' is the word of the day!`)
# Note that the results are more obviously correct with single quotes.
words_of_the_day <- paste("'", words, "' is the word of the day")
# Create a vector `words_of_the_day` that is your `words` vector with the string
# "is the word of the day!" pasted on to the end.
# BONUS: Surround the word in quotes (e.g., `'data' is the word of the day!`)
# Note that the results are more obviously correct with single quotes.
words_of_the_day <- paste0("'", words, "' is the word of the day")
words_of_the_day
# Create a vector `a_f_words` which are the elements in `words` that start with
# "a" through "f"
# Hint: use a comparison operator to see if the word comes before "f" alphabetically!
# Tip: make sure all the words are lower-case, and only consider the first letter
# of the word!
a_f_words <- words[substring(words, 1, 1) <= f]
# Create a vector `a_f_words` which are the elements in `words` that start with
# "a" through "f"
# Hint: use a comparison operator to see if the word comes before "f" alphabetically!
# Tip: make sure all the words are lower-case, and only consider the first letter
# of the word!
a_f_words <- words[substring(words, 1, 1) <= "f"]
# Create a vector `a_f_words` which are the elements in `words` that start with
# "a" through "f"
# Hint: use a comparison operator to see if the word comes before "f" alphabetically!
# Tip: make sure all the words are lower-case, and only consider the first letter
# of the word!
a_f_words <- words[substr(words, 1, 1) <= "f"]
# Create a vector `g_m_words` which are the elements in `words` that start with
# "g" through "m"
g_m_words <- words[words >= "g" & substr(words, 1, 1) < "m"]
word_bin <- function(vector, letter_1, letter_2) {
new_vector <- words[words >= letter_1 & substr(words, 1, 1) <= letter_2]
return(new_vector)
}
# Use your `word_bin` function to determine which of your words start with "e"
# through "q"
word_bin(words, "e", "q")
install.packages(styler)
install.packages("styler")
install.packages(""lintr"")
install.packages("lintr")
library(styler)
library(lintr)
install.packages("lintr")
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("chocolate bar", "milk")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("rice", "chicken", "tofu stir-fry")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast = my_breakfast, lunch = my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner <- c("salad")
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- meals[["lunch"]]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals["breakfast"]
print(early_meals)
early_meals <-meals["1:2"]
print(early_meals)
early_meals <- [1:2]
early_meals <- meals[1:2]
print(early_meals)
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals[1:2]
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
number <- lapply(meals, length)
add_pizza <- function(meal) {
meal <- c(meal, pizza)
meal
}
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- add_pizza(meals)
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- lapply(meals, add_pizza)
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- lapply(meals, add_pizza)
add_pizza <- function(meal) {
meal <- c(meal, "pizza")
meal
}
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- lapply(meals, add_pizza)
print(better_meals)
# Create a vector of the number of points the Seahawks scored in the first 4 games
# of the season (google "Seahawks" for the scores!)
scores <- c(9, 12, 27, 46)
# Create a vector of the number of points the Seahawks scored in the first 4 games
# of the season (google "Seahawks" for the scores!)
scores <- c(9, 12, 27, 46)
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each of the first 4 games of the season
allowed_score <- c(17, 9, 33, 18)
# Combine your two vectors into a dataframe called `games`
games <- data.frame(scores, allowed_score)
View games
View(games)
# Create a new column "diff" that is the difference in points between the teams
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
games$diff <- abs(games$scores - games$allowed_score)
# Create a new column "diff" that is the difference in points between the teams
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
games$diff <- games$scores - games$allowed_score
# Create a new column "won" which is TRUE if the Seahawks won the game
games$won <- games$diff > 0
# Create a vector of the opponent names corresponding to the games played
opponents <- c("Packers", "49ers", "Titans", "Colts")
# Assign your dataframe rownames of their opponents
rownames(games) <- opponents
# View your data frame to see how it has changed!
View(games)
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employee <- paste("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries <- runif(100, 40000, 50000)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
salaries_2018 <- salaries_2017 + runif(100, -5000, 10000)
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employee <- paste("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
salaries_2018 <- salaries_2017 + runif(100, -5000, 10000)
# Create a data frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaies <- data.frame(employee, salaries_2017, salaries_2018, stringsAsFactors = F)
View(salaies)
View(salaies)
# Create a data frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employee, salaries_2017, salaries_2018, stringsAsFactors = F)
# Create a column 'change' that stores each person's change in salary between
# 2017 and 2018
salaries$change <- salaries_2018 - salaries_2017
# Create a column 'got_raise' that is TRUE if the person got a raise (their
# salary went up)
salaries$got_raise <- salaries$change > 0
# Create a column 'got_raise' that is TRUE if the person got a raise (their
# salary went up)
salaries$got_raise <- salaries$change > 0
install.packages("dplyr")
install.packages("shiny")
# Load the `shiny` package (install it in the R terminal if you haven't already)
library(shiny)
# Load the `shiny` package (install it in the R terminal if you haven't already)
library(shiny)
runApp('C:/Users/Dinghao Xu/Desktop/Info 201/ch16-shiny/exercise-1')
runApp('C:/Users/Dinghao Xu/Desktop/Info 201/ch16-shiny/exercise-1')
runApp('C:/Users/Dinghao Xu/Desktop/Info 201/ch16-shiny/exercise-1')
runApp('C:/Users/Dinghao Xu/Desktop/Info 201/ch16-shiny/exercise-1')
runApp('C:/Users/Dinghao Xu/Desktop/Info 201/ch16-shiny/exercise-1')
runApp('C:/Users/Dinghao Xu/Desktop/Info 201/ch16-shiny/exercise-1')
setwd("C:/Users/Dinghao Xu/Desktop/Info 201/ch16-shiny/exercise-3")
# UI for scatterplot
library(shiny)
# Get a vector of column names (from `mpg`) to use as select inputs
select_values <- colnames(mpg)
library(shiny)
library(ggplot2)
# Get a vector of column names (from `mpg`) to use as select inputs
select_values <- colnames(mpg)
library(td)
View(select_values)
runApp()
runApp()
runApp()
runApp('C:/Users/Dinghao Xu/Desktop/Info 201/ch16-shiny/exercise-5')
